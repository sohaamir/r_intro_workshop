---
title: "An introduction to R/RStudio"
subtitle: "An overview of data structures, functions, packages and data visualization"
format: html
webr: 
  show-startup-message: true
  packages: ['ggplot2', 'tidyverse', 'tidyr']
  channel-type: "post-message"
filters:
  - webr
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  warning: false
  message: false
  eval: true
---

:::{.callout-tip title="Running code in the browser"}
Certain code chunks in the course are executable. Press <i class="fa-solid fa-play" style="color: #28f064;"></i> to run the code!
:::

`R` is a powerful open-source programming language and software environment primarily designed for statistical computing, data analysis, and graphical visualization.
`R` has its own interface; when you install `R` onto your own computer(Windows/Mac) you can open `R` on it's own. However, working in this way with `R` ('base `R`') isn't very user friendly!

Instead, we use an IDE (Integrated Development Environment) to work with the `R` programming language. A popular example - and the one that we will be using - is [RStudio](https://posit.co/download/rstudio-desktop/).

<div style="height: 20px;"></div>

![](/images/01.R_basics/rstudio_environment.png){fig-align="center" width="100%"}

The RStudio interface consists of 4 windows:

- **Script editor:** Where you write and edit your `R` code
- **Console:** Where you run `R` commands and see their output
- **Environment/History:** Shows your workspace variables and command history
- **Files/Plots/Packages/Help:** A multi-purpose pane for viewing files, plots, managing packages, and accessing help documentation

You can check your versions of both `R` and RStudio using the following commands:

```{r}
R.version
```

```{r, eval=FALSE}
RStudio.version()
```

```
$version
[1] ‘2024.12.0.467’

$long_version
[1] "2024.12.0+467"

$release_name
[1] "Kousa Dogwood"
```

## Basic R operations

We will now cover some basic operations and values within `R`.

<div style="font-size: 22px;"><strong>Calculator Functions</strong></div>
<div style="height: 16px;"></div>

We can perform basic mathematical operations:

```{webr-r}
#| context: interactive

# Addition and Subtraction
3 + 2
3 - 2

# Multiplication and Division
3 * 2
3 / 2

# Exponents
3^2
2^3

# Constants
pi
exp(1)  # base of natural logarithm
```

<div style="font-size: 22px;"><strong>Special values</strong></div>
<div style="height: 16px;"></div>

In addition to numbers, variables can also take on other values:

```{webr-r}
#| context: interactive

Inf
1 + Inf

# Missing Values
NA
1 + NA

# NULL Values
NULL
1 + NULL
```

## Data types, classes and variables

There are many types of data in `R`, here are some commonly used:

::: {.callout-tip title="Checking your data type"}
You can check data types using the `class` command.
:::

**Numeric** - Decimal and 'whole' numbers (the most common numeric type)
```{webr-r}

#| context: interactive
class(1.1)
```

<br>
**Character** - Text data in quotes
```{webr-r}

#| context: interactive
class("hello world!")
class("42") # Numbers in quotes are characters
```

<br>
**Logical** - Boolean values for conditional logic
```{webr-r}
#| context: interactive

class(TRUE)
class(F) # F is shorthand for FALSE
```

<br>
**Factor** - a data type for categorical variables with fixed levels (categories).

In the example below, we create a vector of letters, some of which are repeated. However, the levels within are limited to each individual letter.
```{webr-r}
#| context: interactive
# Define a factor using letters
f <- factor(letters[c(1, 1, 2, 2, 3:10)])  # Create factor from letters with some repetition
f
```

```{webr-r}
#| context: interactive

class(f)  # Check class
```

<br>
**Storing and manipulating variables**

We commonly assign numbers and data to variables, which we can then compute directly:
```{webr-r}
#| context: interactive
# Define objects x and y with values of 3 and 2 respectively:
x <- 3
y <- 2

# Some calculations with the defined objects x and y:
x + y
x * y
```

:::{.callout-warning title="Case sensitivity"}
R is case sensitive, so `X` and `x` are not the same object!
:::

## Data structures

`R` offers several data structures that serve different purposes. Each structure is designed to handle specific types of data organization, from simple one-dimensional vectors to complex nested lists[^1].

[^1]: Kabacoff, R. I. (2022). R in action: data analysis and graphics with R and Tidyverse. Simon and Schuster. 

![](/images/01.R_basics/data_types.png){fig-align="center" width="60%"}

Here are some examples of each datatype:

<div style="font-size: 22px;"><strong>Vector</strong></div>

- One-dimensional sequence of elements
- All elements must be of the same type (numeric, character, etc.)
```{webr-r}
#| context: interactive
v1 <- 1:12  # Create numeric vector using sequence
v2 <- c(2,4,1,5,1,6, 13:18)  # Create numeric vector by combining values and sequence
v3 <- c(rep('aa',4), rep('bb',4), rep('cc',4))  # Create character vector with repeated values

v1
v2
v3
```

Now let's check the class of each vector:
```{webr-r}
#| context: interactive
class(v1)  # Check class of v1
class(v2)  # Check class of v2
class(v3)  # Check class of v3
```

<div style="font-size: 22px;"><strong>Matrix and array</strong></div>

- Two-dimensional (matrix) and three-dimensional (array) arrangement of elements
- All elements must be of the same type
- Organized in rows and columns
```{webr-r}
#| context: interactive
m1 <- matrix(v1, nrow=3, ncol=4)  # Create matrix filled by column
arr <- array(v1, dim=c(2,2,3))  # Create 3D array

m1
```

```{webr-r}
#| context: interactive
arr
```

Let's check the class of the matrix and array:
```{webr-r}
#| context: interactive

class(m1)  # Check class of matrix
class(arr)  # Check class of array
```

<div style="font-size: 22px;"><strong>Data frame</strong></div>

- Two-dimensional structure similar to a spreadsheet
- Different columns can contain different types of data
- Most common structure for statistical analysis

Suppose we have a data frame of students' grades and demographics:
```{webr-r}
#| context: interactive
# Create a data frame
students <- data.frame(
  Name = c("Alice", "Bob", "Charlie"),
  Gender = c("F", "M", "M"),
  Math = c(95, 88, 92),
  Science = c(89, 94, 90)
)

students
```

Check the class of the dataframe and a column, and display the structure of the dataframe:
```{webr-r}
#| context: interactive
class(students)  # Check class of dataframe
class(students$Name)  # Check class of Name column

str(students)    # Display structure of dataframe
```

We can use the `$` operator to access specific columns in the data frame:
```{webr-r}
#| context: interactive
students$Name  # print Name column
students$Gender  # print Gender column
```

Or we can use the `[[` operator:
```{webr-r}
#| context: interactive

students[["Math"]]    # print Math column
students[["Science"]] # print Science column
```

We can assign values within a specific column or row to a new variable:
```{webr-r}
#| context: interactive
# Get the "Math" column
students_math <- students$Math
print(students_math)

# Get the first row
students_alice <- students[1, ]
print(students_alice)
```

## Logical operators, control flow and functions

We commonly use logical operators in `R` to help make decisions in code and are essential in tasks like subsetting data, controlling loops, writing conditional statements, and filtering data.

<div style="text-align: center; width: 50%; margin: 0 auto;">

| **Operator** | **Summary**                |
|--------------|----------------------------|
| `<`          | Less than                 |
| `>`          | Greater than              |
| `<=`         | Less than or equal to     |
| `>=`         | Greater than or equal to  |
| `==`         | Equal to                  |
| `!=`         | Not equal to              |
| `!x`         | NOT x                     |
| `x | y`      | x OR y                    |
| `x & y`      | x AND y                   |

</div>

### Basic `R` functions

We can perform basic statistics and operations on variables, such as getting the variance, standard deviation and summary statistics:
```{webr-r}
#| context: interactive
# Create a vector of 10 random numbers between 1-100 using the sample() command
x <- sample(1:100, 10)

# Variance and Standard Deviation
var(x)   # Calculates variance
sd(x)    # Calculates standard deviation

# Basic Statistics
sum(x)   # Sums all elements
mean(x)  # Calculates mean

# Range Functions
min(x)   # Finds minimum
max(x)   # Finds maximum
```

## Miscellaneous commands

Here are some other commands that will be useful when working with `R` more generally:

<div style="font-size: 22px;"><strong>Directory and Workspace Management</strong></div>
```{r, eval=FALSE}
#| context: interactive

getwd() # Get current working directory

setwd("your/path/here")  # Set working directory to your path

dir() # List files in current directory
```

<div style="font-size: 22px;"><strong>Environment Management</strong></div>
```{r, eval=FALSE}
#| context: interactive
# List objects in workspace
ls()

# Remove all objects from workspace
rm(list = ls())
```

<div style="font-size: 22px;"><strong>Getting Help</strong></div>
```{webr-r}
#| context: interactive

?mean                                   # Help for mean function
```

```{webr-r}
#| context: interactive

help("mean")                            # Same as above
```

::: {.callout-tip title="Essential RStudio Shortcuts"}
Here are some shortcuts that you can use in RStudio:

<div style="text-align: center; width: 50%; margin: 0 auto;">

| Shortcut | Action |
|----------|---------|
| `Ctrl + L` | Clean console |
| `Ctrl + Shift + N` | Create a new script |
| `↑` | Access command history |
| `Ctrl(hold) + ↑` | Search command history with current input |
| `Ctrl + Enter` | Execute selected code in script |

</div>
<div style="height: 20px;"></div>

These shortcuts work on Windows/Linux. For Mac, replace Ctrl with Cmd (⌘).
:::

## Packages

**Packages are collections of functions, data sets, and documentation bundled together to extend the functionality of `R`.**
They are not part of the base `R` installation but can be easily added and used in your environment.

`R` packages can:

- **Add functions:** They contain pre-written functions that simplify common tasks or complex analyses. For example, packages like `ggplot2` and `dplyr` offer powerful tools for data visualization and manipulation.

- **Provide data:** Some packages include data sets that can be used for testing or teaching purposes. For example, the `datasets` package provides a collection of sample data sets.

- **Enable special features:** Packages can implement specialized features like statistical models, machine learning algorithms, or tools for web scraping, reporting, and more.

### How to use packages in R

Installing: You can install a package from CRAN (the Comprehensive R Archive Network) using the `install.packages()` function.

```{r, eval=FALSE}
install.packages("ggplot2")
```

Loading: Once installed, you can load the package into your R session with the `library()` function.

```{r}
library('ggplot2')
```

Usage: After loading the package, you can use its functions. For example, with `ggplot2`, you can create a plot like this:

```{webr-r}
#| context: interactive
ggplot(data = mtcars, aes(x = mpg, y = hp)) + 
  geom_point()
```

Popular R packages include:

- `ggplot2`: A powerful package for data visualization based on the grammar of graphics.
- `dplyr`: A package for data manipulation (filtering, selecting, grouping, etc.).
- `tidyr`: Used for tidying data, such as reshaping and pivoting.
- `shiny`: For building interactive web applications in `R`.

You can find and install R packages from a number of sources:

- [CRAN](https://cran.r-project.org/): The main repository for `R` packages.
- [Bioconductor](https://www.bioconductor.org/): A repository specializing in bioinformatics packages.
- [GitHub](https://github.com/): Many `R` developers host their packages on GitHub, which you can install using `devtools` or `remotes` packages.

## Data visualization using `ggplot2()`

One of the main benefits of `R` is to create publication quality figures and graphs. There are a number of different functions within `R` that we can use.

We will now briefly cover `ggplot2()` as it is the most versatile and used approach to create complex figures.

**`ggplot2` is a powerful `R` package for creating complex and customizable data visualizations.**
It provides a systematic approach to building plots by combining two main components: geometries (`geom`) and aesthetics (`aes`).

`plot = geometric (points, lines, bars) + aesthetic (color, shape, size)`

Geometries (`geom`): These define the type of plot or visual elements you want to display. Common `geoms` include:

- `geom_point()`: Displays data points (scatter plot).
- `geom_line()`: Plots lines connecting data points.
- `geom_bar()`: Creates bar charts.

Aesthetics (`aes`): These define how data is mapped to visual properties. The aesthetics determine the appearance of the plot, such as:

- `color`: Specifies the color of the points, lines, or bars.
- `shape`: Defines the shape of data points (e.g., circles, squares).
- `size`: Controls the size of the points or lines.

Importantly, `ggplot2()` is built upon the layering of different components. For example, you can simply add more `aes` components to add a line of best fit, and standard error:

![](/images/01.R_basics/ggplot_layering.png){fig-align="center" width="100%"}

::: {.callout-tip title="The R Graph Gallery"}
You can create many, many, many different types of graphs and plots using `ggplot2()`. You can check out it's versatility by seeing examples at the [R Graph Gallery](https://r-graph-gallery.com/).
:::